import dotenv from "dotenv";
dotenv.config();

const {
  PORT : port,
  ENV : env,
  JWT_KEY : jwtKey,
  DB_CONNECTION : dbConnection,
  DB_PORT : dbPort,
  DB_USERNAME : dbUsername,
  DB_PASSWORD : dbPassword,
  DB_NAME : dbName,
  EMAIL_ADDRESS : emailAddress,
  EMAIL_PASSWORD : emailPassword,
  EMAIL_HOST : emailHost,
  EMAIL_PORT : emailPort,
  EMAIL_ENABLE : emailEnable,
  FE_URL : feUrl,
  USER_TRUST_PROXY : userTrustProxy,
  JWT_EXPIRE_MINUTES : jwtExpireMinutes,
  ADMIN_EMAIL : adminEmail,
  ADMIN_PASSWORD : adminPassword,
  NX_WITNESS_URL : nxWitnessUrl,
  REDIS_HOST : redisHost,
  NX_WITNESS_USERNAME : nxWitnessUsername,
  NX_WITNESS_PASSWORD : nxWitnessPassword,
  REDIS_KEY_NX_TOKEN : redisKeyNxToken,
  MQTT_HOST : mqttHost,
  MQTT_PORT : mqttPort,
  MQTT_USERNAME : mqttUsername,
  MQTT_PASSWORD : mqttPassword,
  UPLOAD_FILE_PATH : uploadFilePath,
  VERSION : version
} = process.env;

export const configuration = {
  productionMode : env === "production",
  testMode : env === "test",
  port,
  env,
  jwtKey,
  dbConnection,
  dbPort,
  dbUsername,
  dbPassword,
  dbName,
  emailAddress,
  emailPassword,
  emailHost,
  emailPort : parseInt(emailPort),
  emailEnable : emailEnable === "true",
  feUrl,
  userTrustProxy,
  adminEmail,
  adminPassword,
  redisHost,
  nxWitnessUrl,
  nxWitnessUsername,
  nxWitnessPassword,
  tokenExpiresMinute : parseInt(jwtExpireMinutes) || 240,
  redisKeyNxToken,
  mqttHost,
  mqttPort,
  mqttUsername,
  mqttPassword,
  uploadFilePath,
  version
};