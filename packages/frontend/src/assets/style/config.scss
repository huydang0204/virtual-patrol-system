@import url("https://fonts.googleapis.com/css?family=Nunito:300,400,400i,500,600,700");

$font-family-nunito: "Nunito", sans-serif;

$font-family-base: $font-family-nunito;
$font-size-base: 0.8rem;
$line-height-base: 1.25 !default;

$font-weight-light: 300;
$font-weight-normal: 400;
$font-weight-medium: 500;
$font-weight-bold: 600;
$font-weight-bolder: 700;

$light-blue: #95def3;
$light-blue-2: #95bbfe;
$blue: #2a93d5;
$dark-blue: #145388;
$light-green: #91e2c6;
$green: #3e884f;
$green-light: #38e20d;
$green-transparent: #14e24413;
$dark-green: #0a7b83;
$red: #e5484d;
$red-transparent: #cd2b3027;
$red-light: #cd2b304b;
$lite-yellow: #ffd24c;
$yellow: #b69329;
$pink: #e5a7f2;
$purple: #b0aefb;
$orange: #ffab58;
$white: #fff;
$gray: #6f6c7f;
$blue-gray: #dfe3ec;
$gray-100: #f7f7f7;
$gray-200: #e9ecef;
$gray-300: #dee2e6;
$gray-400: #ced4da;
$gray-500: #adb5bd;
$gray-600: #575d69;
$gray-700: #495057;
$gray-800: #343a40;
$gray-900: #212529;
$gray-999: #34343a;
$gray-dark: #343439;
$gray-soft: #3e3e43;
$black: #283344;
$black-900: #1e1e1e;
$body-bg: $black-900;
$body-color: $black;
$primary: $red;
$primary-light: $red-light;
$table-bg: #3e3e43;

$theme-colors: (
  "primary": $red,
  "primary-light": $primary-light,
  "secondary": $gray-500,
  "warning": $yellow,
  "success": $green,
  "danger": $red,
  "danger-transparent": $red-transparent,
  "blue": $blue,
  "light-blue": $light-blue,
  "light-blue-2": $light-blue-2,
  "dark-blue": $dark-blue,
  "green": $green,
  "green-light": $green-light,
  "green-transparent": $green-transparent,
  "light-green": $light-green,
  "dark-green": $dark-green,
  "red": $red,
  "yellow": $yellow,
  "pink": $pink,
  "purple": $purple,
  "orange": $orange,
  "white": $white,
  "gray": $gray,
  "gray-100": $gray-100,
  "gray-200": $gray-200,
  "gray-300": $gray-300,
  "gray-400": $gray-400,
  "gray-500": $gray-500,
  "gray-600": $gray-600,
  "gray-700": $gray-700,
  "gray-800": $gray-800,
  "gray-900": $gray-900,
  "gray-999": $gray-999,
  "gray-dark": $gray-dark,
  "gray-soft": $gray-soft,
  "blue-gray": $blue-gray,
  "black": $black,
  "body-bg": $body-bg
);

$min-contrast-ratio: 3;

$separator-color: #d7d7d7;

$gradient-color-1: #3693ce;
$gradient-color-2: #104978;
$gradient-color-3: #3582b2;

$input-bg: $white;
$input-box-shadow: none;
$input-focus-box-shadow: none;
$input-focus-border-color: $dark-blue;
$input-font-size-lg: 0.85rem;
$input-btn-focus-box-shadow: none;
$form-select-focus-box-shadow: none;
$input-btn-padding-y: 0.45rem;
$input-btn-padding-x: 0.9rem;
$input-padding-x: 0.75rem;
$btn-border-radius: 1rem;
$btn-border-radius-sm: 1rem;
$btn-border-radius-lg: 1.5rem;
$btn-active-box-shadow: none;
$btn-focus-box-shadow: none;
$btn-box-shadow: none;

$btn-padding-x-lg: 2rem;
$btn-padding-y-lg: 0.6rem;
$btn-font-size-lg: 0.85rem;

$headings-margin-bottom: 0;

$shadowOffsetsTop: 1 3 10 14 19;
$shadowBlursTop: 1.5 5 10 14 19;
$shadowOpacitiesTop: 0.04 0.1 0.19 0.25 0.3;

$shadowOffsetsBottom: 1 3 6 10 15;
$shadowBlursBottom: 3 6 6 5 6;
$shadowOpacitiesBottom: 0.04 0.1 0.2 0.22 0.22;

$main-menu-item-height: 44px;
$main-menu-width: 240px;
$main-menu-width-lg: 230px;
$main-menu-width-md: 220px;
$main-menu-width-xs: 210px;

$sub-menu-width: 230px;
$sub-menu-width-lg: 220px;
$sub-menu-width-md: 200px;
$sub-menu-width-xs: 190px;

$navbar-height: 86px;
$navbar-height-xs: 86px;
$navbar-height-md: 86px;
$navbar-height-lg: 86px;

$app-menu-width: 280px;

$main-menu-item-height-mobile: 90px;

$menu-collapse-time: 300ms;
$animation-time-long: 1000ms;
$animation-time-short: 200ms;

$border-radius: 0.1rem;

$header-height: 70px;

$menu-width: 220px;
$menu-md-width: 240px;

$content-padding: 15px;
$content-sm-padding: 35x;
$content-md-padding: 35px;

$navbar-height: 86px;
$navbar-height-xs: 86px;
$navbar-height-md: 86px;
$navbar-height-lg: 86px;

$main-margin: 60px;
$main-margin-lg: 30px;
$main-margin-md: 20px;
$main-margin-xs: 15px;

$app-menu-width: 280px;

$main-menu-item-height-mobile: 90px;

$menu-collapse-time: 300ms;
$animation-time-long: 1000ms;
$animation-time-short: 200ms;

$backgroundPath: "/assets/images/login-fixed-background.jpeg";
$backgroundPathMobile: "/assets/images/login-fixed-background.jpeg";

/* Minxin */
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

@mixin transform($args...) {
  -webkit-transform: $args;
  -moz-transform: $args;
  -ms-transform: $args;
  -o-transform: $args;
  transform: $args;
}

@mixin transform-origin($args...) {
  -webkit-transform-origin: $args;
  -moz-transform-origin: $args;
  -ms-transform-origin: $args;
  -o-transform-origin: $args;
  transform-origin: $args;
}

@mixin transition-transform($duration, $timing, $delay: 0s, $preface: webkit moz ms o spec) {
  @each $browser in $preface {
    @if ($browser == spec) {
      transition: transform $duration $timing $delay;
    } @else {
      -#{$browser}-transition: -#{$browser}-transform $duration $timing $delay;
    }
  }
}

// Gives a card depth effect.
// @param {Number} $depth - depth level (between 1 and 5)
// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
// @requires {function} top-shadow
// @requires {function} bottom-shadow
@mixin depth($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}

// Computes a top-shadow for a card effect.
// @param {Number} $depth - depth level
// @return {List}

@function top-shadow($depth) {
  $primary-offset: nth($shadowOffsetsTop, $depth) * 1px;
  $blur: nth($shadowBlursTop, $depth) * 4px;
  $color: rgba(black, nth($shadowOpacitiesTop, $depth));

  @return 0 $primary-offset $blur $color;
}

// Computes a bottom-shadow for a card effect.
// @param {Number} $depth - depth level
// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth($shadowOffsetsBottom, $depth) * 1px;
  $blur: nth($shadowBlursBottom, $depth) * 5px;
  $color: rgba(black, nth($shadowOpacitiesBottom, $depth));
  @return 0 $primary-offset $blur $color;
}

@mixin clearfix() {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}

@mixin respond-below($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint); // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn "Invalid breakpoint: #{$breakpoint}.";
  }
}

//Responsive Breakpoints
$breakpoints: (
  xxs: 420px,
  xs: 576px,
  sm: 768px,
  md: 992px,
  lg: 1200px,
  xl: 1440px
);
